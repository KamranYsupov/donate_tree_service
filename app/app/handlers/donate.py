from datetime import datetime, timedelta
import uuid

import loguru
from aiogram import Router, F, Bot
from aiogram.enums import ChatMemberStatus
from aiogram.types import CallbackQuery
from aiogram.filters import Command
from aiogram.types import Message

from dependency_injector.wiring import inject, Provide

from app.core.container import Container
from app.schemas.donate import DonateEntity, DonateTransactionEntity
from app.services.donate_confirm_service import DonateConfirmService
from app.services.telegram_user_service import TelegramUserService
from app.models.telegram_user import status_list
from app.services.donate_service import DonateService
from app.schemas.telegram_user import TelegramUserEntity
from app.keyboards.donate import get_donate_keyboard
from app.utils.sponsor import get_callback_value
from app.models.telegram_user import DonateStatus
from app.core.config import settings
from app.services.matrix_service import MatrixService
from app.schemas.matrix import MatrixEntity
from app.keyboards.donate import get_donations_keyboard
from app.db.commit_decorator import commit_and_close_session
from app.keyboards.reply import get_reply_keyboard
from app.utils.pagination import Paginator
from app.utils.sort import get_reversed_dict
from app.utils.sponsor import check_telegram_user_status
from app.tasks.donate import check_is_donate_confirmed_or_delete_donate_task

donate_router = Router()


@donate_router.callback_query(F.data.startswith("yes_"))
@inject
async def subscribe_handler(
        callback: CallbackQuery,
) -> None:
    sponsor_user_id = get_callback_value(callback.data)

    await callback.message.edit_text(
        f"–î–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ä–∞–±–æ—Ç—ã, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —á–∞—Ç—É –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n\n {settings.chat_link}",
        reply_markup=get_donate_keyboard(
            buttons={
                "–Ø –ø–æ–¥–ø–∏—Å–∞–Ω(–∞) ‚úÖ": f"menu_{sponsor_user_id}",
            }
        ),
    )


@donate_router.callback_query(F.data.startswith("menu_"))
@inject
@commit_and_close_session
async def subscription_checker(
        callback: CallbackQuery,
        telegram_user_service: TelegramUserService = Provide[
            Container.telegram_user_service
        ],
):
    sponsor_user_id = get_callback_value(callback.data)
    sponsor = await telegram_user_service.get_telegram_user(user_id=sponsor_user_id)

    result = await callback.bot.get_chat_member(
        chat_id=settings.chat_id, user_id=callback.from_user.id
    )
    if result.status in (ChatMemberStatus.LEFT, ChatMemberStatus.KICKED):
        await callback.answer("–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è ‚ùå", show_alert=True)
        return

    loguru.logger.info(callback.data)
    await callback.message.delete()


    if not callback.from_user.username:
        await callback.message.answer(
            "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ <em>username</em> –≤ —Å–≤–æ–π telegram –∞–∫–∫–∞—É–Ω—Ç",
            reply_markup=get_donate_keyboard(
                buttons={"–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑": callback.data}
            )
        )
        return


    current_user = await telegram_user_service.get_telegram_user(
        user_id=callback.from_user.id
    )

    if not current_user:
        user_dict = callback.from_user.model_dump()
        user_id = user_dict.pop("id")

        user_dict["user_id"] = user_id
        user_dict["sponsor_user_id"] = sponsor_user_id
        user = TelegramUserEntity(**user_dict)

        current_user = await telegram_user_service.create_telegram_user(
            user=user,
            sponsor=sponsor,
        )
        await callback.bot.send_message(
            chat_id=sponsor.user_id,
            text=f"–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{current_user.username}."
        )

    await callback.message.answer(
        "‚úÖ –ì–æ—Ç–æ–≤–æ! –í—ã–±–µ—Ä–∏ —Å–µ—Ä–≤–∏—Å", reply_markup=get_reply_keyboard(current_user)
    )



@donate_router.message(F.text == "üí∞ –ú–û–ò –°–¢–û–õ–´ üí∞")
@inject
async def donations_menu_handler(
        message: Message,
        telegram_user_service: TelegramUserService = Provide[
            Container.telegram_user_service
        ],
        donate_confirm_service: DonateConfirmService = Provide[
            Container.donate_confirm_service
        ],
) -> None:
    default_buttons = {"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ üí≥": "transactions", "–ú–û–Ø –ö–û–ú–ê–ù–î–ê": "team_1"}

    current_user = await telegram_user_service.get_telegram_user(
        user_id=message.from_user.id
    )
    if current_user.is_admin:
        message_text = (
            f"–õ–∏—á–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: <b>{current_user.invites_count}</b>\n"
            f"–ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: <b>${int(current_user.bill)}</b>\n"
        )
        await message.answer(
            text=message_text,
            reply_markup=get_donate_keyboard(
                buttons=default_buttons,
            ),
        )
        return

    all_donates = await donate_confirm_service.get_donate_by_telegram_user_id(
        telegram_user_id=current_user.id
    )
    buttons = {}
    if not all_donates:
        sponsor = await telegram_user_service.get_telegram_user(
            user_id=current_user.sponsor_user_id
        )
        buttons.update(get_reversed_dict(get_donations_keyboard(current_user, status_list)))
        message_text = (
                f"–í–∞—à —Å–ø–æ–Ω—Å–æ—Ä: "
                + ("@" + sponsor.username if sponsor.username else sponsor.first_name)
                + "\n"
                  f"–ú–æ–π —Å—Ç–∞—Ç—É—Å: <b>{current_user.status.value}</b>\n"
                  f"–õ–∏—á–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: <b>{current_user.invites_count}</b>\n"
                  f"–ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: <b>$</b>{current_user.bill} \n"
        )
    else:
        message_text = (
            "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ –±—É–¥–µ—Ç "
            "–¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ"
        )

    buttons.update(default_buttons)

    await message.answer(
        parse_mode="HTML",
        text=message_text,
        reply_markup=get_donate_keyboard(
            buttons=buttons,
        ),
    )


@donate_router.callback_query(F.data == "donations")
@inject
async def donations_menu_handler(
        callback: CallbackQuery,
        telegram_user_service: TelegramUserService = Provide[
            Container.telegram_user_service
        ],
        donate_confirm_service: DonateConfirmService = Provide[
            Container.donate_confirm_service
        ],
) -> None:
    default_buttons = {"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ üí≥": "transactions", "–ú–û–Ø –ö–û–ú–ê–ù–î–ê": "team_1"}

    current_user = await telegram_user_service.get_telegram_user(
        user_id=callback.from_user.id
    )
    if current_user.is_admin:
        message_text = (
            f"–õ–∏—á–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: <b>{current_user.invites_count}</b>\n"
            f"–ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: <b>$</b>{current_user.bill}\n"
        )

        await callback.message.edit_text(
            text=message_text,
            reply_markup=get_donate_keyboard(
                buttons=default_buttons,
            ),
        )
        return

    all_donates = await donate_confirm_service.get_donate_by_telegram_user_id(
        telegram_user_id=current_user.id
    )
    buttons = {}
    if not all_donates:
        sponsor = await telegram_user_service.get_telegram_user(
            user_id=current_user.sponsor_user_id
        )
        buttons.update(get_reversed_dict(get_donations_keyboard(current_user, status_list)))
        message_text = (
                f"–í–∞—à —Å–ø–æ–Ω—Å–æ—Ä: "
                + ("@" + sponsor.username if sponsor.username else sponsor.first_name)
                + "\n"
                  f"–ú–æ–π —Å—Ç–∞—Ç—É—Å: <b>{current_user.status.value}</b>\n"
                  f"–õ–∏—á–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: <b>{current_user.invites_count}</b>\n"
                  f"–ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: <b>$</b>{current_user.bill}\n"
        )
    else:
        message_text = (
            "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ –±—É–¥–µ—Ç "
            "–¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ"
        )

    buttons.update(default_buttons | {"–ú–û–Ø –ö–û–ú–ê–ù–î–ê": "team_1"})

    await callback.message.edit_text(
        parse_mode="HTML",
        text=message_text,
        reply_markup=get_donate_keyboard(
            buttons=buttons,
        ),
    )


@donate_router.callback_query(F.data.startswith("confirm_donate_"))
@inject
@commit_and_close_session
async def confirm_donate(
        callback: CallbackQuery,
) -> None:
    if "üî¥" in callback.data.split("_"):
        return

    callback_donate_data = "_".join(callback.data.split("_")[1:])
    donate_sum = callback_donate_data.split("_")[-1]

    await callback.message.edit_text(
        text=f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è, "
             f"–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ ${donate_sum} "
             f"–≤ —Ç–µ—á–µ–Ω–∏–µ {settings.donate_confirmation_time_minutes} –º–∏–Ω—É—Ç. \n\n"
             "<b>–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?</b>",
        parse_mode="HTML",
        reply_markup=get_donate_keyboard(
            buttons={
                "–î–∞": callback_donate_data,
                "–ù–µ—Ç": "donations",
            },
            sizes=(2, 1),
        ),
    )


@donate_router.callback_query(F.data.startswith("donate_"))
@inject
@commit_and_close_session
async def donate_handler(
        callback: CallbackQuery,
        telegram_user_service: TelegramUserService = Provide[
            Container.telegram_user_service
        ],
        donate_service: DonateService = Provide[Container.donate_service],
        matrix_service: MatrixService = Provide[Container.matrix_service],
        donate_confirm_service: DonateConfirmService = Provide[
            Container.donate_confirm_service
        ],
) -> None:
    donate_sum = int(get_callback_value(callback.data))
    status = donate_service.get_donate_status(donate_sum)
    current_user = await telegram_user_service.get_telegram_user(
        user_id=callback.from_user.id
    )

    if not callback.from_user.username:
        await callback.message.edit_text(
            "–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø–æ–¥–∞—Ä–∫–∞, –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ <em>username</em> –≤ —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç"
        )
        return

    if callback.from_user.username and current_user.username is None:
        current_user.username = callback.from_user.username

    all_donates = await donate_confirm_service.get_donate_by_telegram_user_id(
        telegram_user_id=current_user.id
    )
    if all_donates:
        message_text = (
            "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ –±—É–¥–µ—Ç "
            "–¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ"
        )
        await callback.message.edit_text(
            text=message_text,
            reply_markup=get_donate_keyboard(buttons={"–ú–û–Ø –ö–û–ú–ê–ù–î–ê": "team_1"}),
        )
        return

    first_sponsor = await telegram_user_service.get_telegram_user(
        user_id=current_user.sponsor_user_id
    )

    donations_data = {}

    matrix = await donate_service.add_user_to_matrix(
        first_sponsor, current_user, donate_sum, donations_data
    )

    donate = await donate_confirm_service.create_donate(
        telegram_user_id=current_user.id,
        donate_data=donations_data,
        matrix_id=matrix.id,
        quantity=donate_sum,
    )

    now = datetime.now()
    eta = now + timedelta(minutes=settings.donate_confirmation_time_minutes)

    check_is_donate_confirmed_or_delete_donate_task.apply_async(
        kwargs={
            "donate_id": donate.id,
            "donate_sender_user_id": current_user.user_id,
    },
        eta=eta
    )
    transactions = await donate_confirm_service.get_donate_transactions_by_donate_id(
        donate_id=donate.id
    )

    message = (
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –≤ —Ä–∞–∑–º–µ—Ä–µ ${donate_sum}.\n\n"
        f"–î–ª—è —ç—Ç–æ–≥–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –≤–æ–∑—å–º–∏—Ç–µ –µ–≥–æ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, "
        f"–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞:\n\n"
    )

    for transaction in transactions:
        sponsor = await telegram_user_service.get_telegram_user(
            id=transaction.sponsor_id
        )
        message += f"${int(transaction.quantity)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{sponsor.username}\n"
        # –±–ª–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–ø–æ–Ω—Å–æ—Ä–∞–º
        try:
            await callback.bot.send_message(
                text=f"–í–∞–º –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç @{current_user.username} –≤ —Ä–∞–∑–º–µ—Ä–µ ${int(transaction.quantity)}\n"
                     f'–ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫" –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞\n',
                chat_id=sponsor.user_id,
                reply_markup=get_donate_keyboard(
                    buttons={"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫": f"first_{transaction.id}"}
                ),
            )
        except Exception:
            pass

    await callback.message.delete()
    await callback.message.answer(message)


@donate_router.callback_query(F.data.startswith("first_"))
@inject
async def first_confirm_handler(
        callback: CallbackQuery,
        donate_confirm_service: DonateConfirmService = Provide[
            Container.donate_confirm_service
        ],
) -> None:
    transaction_id = get_callback_value(callback.data)
    transaction = await donate_confirm_service.get_donate_transaction_by_id(
        transaction_id
    )

    if transaction.is_canceled:
        await callback.message.edit_text(
            '–í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—ã—à–ª–æ.'
        )
        return

    await callback.message.edit_text(
        text="<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã?</b>",
        parse_mode="HTML",
        reply_markup=get_donate_keyboard(
            buttons={
                "–î–∞": f"confirm_transaction_{transaction_id}",
                "–ù–µ—Ç": f"cancel_confirm_{transaction_id}",
            },
            sizes=(2, 1),
        ),
    )


@donate_router.callback_query(F.data.startswith("firstadmin_"))
@inject
async def first_admin_confirm_handler(
        callback: CallbackQuery,
        donate_confirm_service: DonateConfirmService = Provide[
            Container.donate_confirm_service
        ],
) -> None:
    transaction_id = get_callback_value(callback.data)
    page_number = callback.data.split("_")[-2]

    transaction = await donate_confirm_service.get_donate_transaction_by_id(
        transaction_id
    )

    if transaction.is_canceled:
        await callback.message.edit_text(
            '–í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—ã—à–ª–æ.',
            reply_markup=get_donate_keyboard(
                buttons={
                    "üîô –ù–∞–∑–∞–¥ ": f"all_transactions_{page_number}",
                },
                sizes=(1,),
            ),
        )
        return

    await callback.message.edit_text(
        text="<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã?</b>",
        parse_mode="HTML",
        reply_markup=get_donate_keyboard(
            buttons={
                "–î–∞": f"confirm_admin_{transaction_id}",
                "–ù–µ—Ç": f"all_transactions_{page_number}",
            },
            sizes=(2, 1),
        ),
    )


@donate_router.callback_query(F.data.startswith("firsttran_"))
@inject
async def first_transactions_confirm_handler(
        callback: CallbackQuery,
        donate_confirm_service: DonateConfirmService = Provide[
            Container.donate_confirm_service
        ],
) -> None:
    transaction_id = get_callback_value(callback.data)
    page_number = callback.data.split("_")[-2]

    transaction = await donate_confirm_service.get_donate_transaction_by_id(
        transaction_id
    )

    if transaction.is_canceled:
        await callback.message.edit_text(
            '–í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—ã—à–ª–æ.',
            reply_markup=get_donate_keyboard(
                buttons={
                    "üîô –ù–∞–∑–∞–¥ ": f"transactions_to_me_{page_number}",
                },
                sizes=(1,),
            ),
        )
        return

    await callback.message.edit_text(
        text="<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã?</b>",
        parse_mode="HTML",
        reply_markup=get_donate_keyboard(
            buttons={
                "–î–∞": f"confirm_transaction_{transaction_id}",
                "–ù–µ—Ç": f"transactions_to_me_{page_number}",
            },
            sizes=(2, 1),
        ),
    )


@donate_router.callback_query(F.data.startswith("cancel_confirm_"))
@inject
async def cancel_confirm(
        callback: CallbackQuery,
        telegram_user_service: TelegramUserService = Provide[
            Container.telegram_user_service
        ],
        donate_confirm_service: DonateConfirmService = Provide[
            Container.donate_confirm_service
        ],
):
    transaction_id = uuid.UUID(get_callback_value(callback.data))
    transaction = await donate_confirm_service.get_donate_transaction_by_id(transaction_id)

    donate = await donate_confirm_service.get_donate_by_id(
        donate_id=transaction.donate_id
    )
    telegram_user = await telegram_user_service.get_telegram_user(
        id=donate.telegram_user_id
    )

    await callback.message.edit_text(
        text=f"–í–∞–º –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç @{telegram_user.username} –≤ —Ä–∞–∑–º–µ—Ä–µ ${int(transaction.quantity)}\n"
             f'–ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫" –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞\n',
        reply_markup=get_donate_keyboard(
            buttons={"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫": f"first_{transaction.id}"}
        ),
    )


@donate_router.callback_query(F.data == "transactions")
@inject
async def get_transactions_menu(
        callback: CallbackQuery,
        telegram_user_service: TelegramUserService = Provide[
            Container.telegram_user_service
        ],
) -> None:
    buttons = {
        "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –º–Ω–µ üìà": "transactions_to_me_1",
        "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç –º–µ–Ω—è üìâ": "transactions_from_me_1",
    }
    user_id = callback.from_user.id
    user = await telegram_user_service.get_telegram_user(user_id=user_id)
    if user.is_admin:
        buttons["–í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ üìä"] = "all_transactions_1"

    buttons["üîô –ù–∞–∑–∞–¥"] = "donations"

    await callback.message.edit_text(
        "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –ø–æ–¥–∞—Ä–∫–∞–º.\n"
        "–í—ã–±–µ—Ä–µ—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_donate_keyboard(buttons=buttons),
    )


@donate_router.callback_query(F.data.startswith("transactions_to_me_"))
@inject
@commit_and_close_session
async def get_transactions_list_to_me(
        callback: CallbackQuery,
        telegram_user_service: TelegramUserService = Provide[
            Container.telegram_user_service
        ],
        donate_confirm_service: DonateConfirmService = Provide[
            Container.donate_confirm_service
        ],
) -> None:
    page_number = int(get_callback_value(callback.data))

    user_id = callback.from_user.id
    user = await telegram_user_service.get_telegram_user(user_id=user_id)
    transactions = await donate_confirm_service.get_donate_transaction_by_sponsor_id(
        sponsor_id=user.id
    )

    paginator = Paginator(transactions, page_number=page_number, per_page=5)
    buttons = {}
    sizes = (1, 1)

    if paginator.has_previous():
        buttons |= {"‚óÄ –ü—Ä–µ–¥.": f"transactions_to_me_{page_number - 1}"}
    if paginator.has_next():
        buttons |= {"–°–ª–µ–¥. ‚ñ∂": f"transactions_to_me_{page_number + 1}"}

    if len(buttons) == 2:
        sizes = (2, 1)

    message = "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –í–∞–º.\n\n"
    transactions = paginator.get_page()
    if transactions:
        for transaction in transactions:
            donate = await donate_confirm_service.get_donate_by_id(
                donate_id=transaction.donate_id
            )
            user = await telegram_user_service.get_telegram_user(
                id=donate.telegram_user_id
            )
            message += (
                f"ID: {transaction.id}\n"
                f"–°—É–º–º–∞: ${int(transaction.quantity)}\n"
                f"–û—Ç: @{user.username}\n"
                f"–î–∞—Ç–∞: {transaction.created_at}\n"
            )
            message += "<b>–û–¢–ú–ï–ù–ï–ù–ê ‚ùå</b>\n" if transaction.is_canceled else ''
            message += (
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: " +
                ("–î–∞" if transaction.is_confirmed else "<b>–ù–µ—Ç</b>") +
                "\n\n"
            )
            if not transaction.is_confirmed and not transaction.is_canceled:
                buttons[f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å {transaction.id}"] = (
                    f"firsttran_{page_number}_{transaction.id}"
                )
    else:
        message = "–£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"

    buttons["üîô –ù–∞–∑–∞–¥"] = f"transactions"
    await callback.message.edit_text(
        message,
        reply_markup=get_donate_keyboard(
            buttons=buttons,
            sizes=sizes,
        ),
    )


@donate_router.callback_query(F.data.startswith("transactions_from_me_"))
@inject
async def get_transactions_list_from_me(
        callback: CallbackQuery,
        telegram_user_service: TelegramUserService = Provide[
            Container.telegram_user_service
        ],
        donate_service: DonateService = Provide[Container.donate_service],
        matrix_service: MatrixService = Provide[Container.matrix_service],
        donate_confirm_service: DonateConfirmService = Provide[
            Container.donate_confirm_service
        ],
) -> None:
    page_number = int(get_callback_value(callback.data))

    user_id = callback.from_user.id
    user = await telegram_user_service.get_telegram_user(user_id=user_id)
    donates = await donate_confirm_service.get_all_my_donates_and_transactions(
        telegram_user_id=user.id
    )

    paginator = Paginator(list(donates.items()), page_number=page_number, per_page=3)
    buttons = {}
    sizes = (1, 1)
    message = "<b><u>–í–∞—à–∏ –ø–æ–¥–∞—Ä–∫–∏ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</u></b>\n\n"

    donates = paginator.get_page()
    if donates:
        for donate, transactions in donates:
            message += (
                f"<b><u>–ü–æ–¥–∞—Ä–æ–∫ –Ω–∞ —Å—É–º–º—É: ${int(donate.quantity)}</u></b>\n"
                f"ID: {donate.id}\n"
                f"–î–∞—Ç–∞: {donate.created_at}\n"
            )
            message += "<b>–û–¢–ú–ï–ù–ï–ù ‚ùå</b>\n" if donate.is_canceled else ''
            message += (
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: " +
                ("–î–∞" if donate.is_confirmed else "<b>–ù–µ—Ç</b>") +
                "\n\n"
            )

            if transactions:
                for transaction in transactions:
                    sponsor = await telegram_user_service.get_telegram_user(
                        id=transaction.sponsor_id
                    )
                    message += f"–ö–æ–º—É: @{sponsor.username}\n\n"
    else:
        message = "–£ –í–∞—Å –Ω–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤"

    if paginator.has_previous():
        buttons |= {"‚óÄ –ü—Ä–µ–¥.": f"transactions_from_me_{page_number - 1}"}
    if paginator.has_next():
        buttons |= {"–°–ª–µ–¥. ‚ñ∂": f"transactions_from_me_{page_number + 1}"}

    if len(buttons) == 2:
        sizes = (2, 1)

    buttons["üîô –ù–∞–∑–∞–¥"] = f"transactions"

    await callback.message.edit_text(
        message,
        parse_mode="HTML",
        reply_markup=get_donate_keyboard(buttons=buttons, sizes=sizes),
    )


@donate_router.callback_query(F.data.startswith("all_transactions_"))
@inject
async def get_all_transactions(
        callback: CallbackQuery,
        telegram_user_service: TelegramUserService = Provide[
            Container.telegram_user_service
        ],
        donate_confirm_service: DonateConfirmService = Provide[
            Container.donate_confirm_service
        ],
) -> None:
    page_number = int(get_callback_value(callback.data))
    donates_and_transactions = (
        await donate_confirm_service.get_all_donates_and_transactions()
    )

    paginator = Paginator(
        list(donates_and_transactions.items()), page_number=page_number, per_page=3
    )
    buttons = {}
    sizes = (1, 1)
    message = "–í—Å–µ –ø–æ–¥–∞—Ä–∫–∏ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n\n"
    donates_and_transactions = paginator.get_page()

    if paginator.has_previous():
        buttons |= {"‚óÄ –ü—Ä–µ–¥.": f"all_transactions_{page_number - 1}"}
    if paginator.has_next():
        buttons |= {"–°–ª–µ–¥. ‚ñ∂": f"all_transactions_{page_number + 1}"}

    if len(buttons) == 2:
        sizes = (2, 1)

    if donates_and_transactions:
        for donate, transactions in paginator.get_page():
            user = await telegram_user_service.get_telegram_user(
                id=donate.telegram_user_id
            )
            message += (
                f"<b><u>–ü–æ–¥–∞—Ä–æ–∫ –Ω–∞ —Å—É–º–º—É: ${int(donate.quantity)}</u></b>\n"
                f"ID: {donate.id}\n"
                f"–î–∞—Ç–∞: {donate.created_at}\n"
            )
            message += "<b>–û–¢–ú–ï–ù–ï–ù ‚ùå</b>\n\n" if donate.is_canceled else ''
            message += "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –ø–æ–¥–∞—Ä–∫—É: \n\n"
            if transactions:
                for transaction in transactions:
                    sponsor = await telegram_user_service.get_telegram_user(
                        id=transaction.sponsor_id
                    )
                    message += (
                        f"ID: {transaction.id}\n"
                        f"–°—É–º–º–∞: ${int(transaction.quantity)}\n"
                        f"–û—Ç –∫–æ–≥–æ: @{user.username}\n"
                        f"–ö–æ–º—É: @{sponsor.username}\n"
                    )
                    message += (
                        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: " +
                        ("–î–∞" if transaction.is_confirmed else "<b>–ù–µ—Ç</b>") +
                        "\n\n"
                    )
                    if not transaction.is_confirmed and not transaction.is_canceled:
                        buttons[f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å {transaction.id}"] = (
                            f"firstadmin_{page_number}_{transaction.id}"
                        )

    buttons["üîô –ù–∞–∑–∞–¥"] = f"transactions"
    await callback.message.edit_text(
        message,
        parse_mode="HTML",
        reply_markup=get_donate_keyboard(
            buttons=buttons,
            sizes=sizes,
        ),
    )


@donate_router.callback_query(F.data.startswith("confirm_transaction_"))
@inject
@commit_and_close_session
async def confirm_transaction(
        callback: CallbackQuery,
        telegram_user_service: TelegramUserService = Provide[
            Container.telegram_user_service
        ],
        matrix_service: MatrixService = Provide[Container.matrix_service],
        donate_confirm_service: DonateConfirmService = Provide[
            Container.donate_confirm_service
        ],
) -> None:
    transaction_id = uuid.UUID(get_callback_value(callback.data))

    transaction = await donate_confirm_service.get_donate_transaction_by_id(transaction_id)

    donate = await donate_confirm_service.get_donate_by_id(
        donate_id=transaction.donate_id
    )
    if donate.is_confirmed:
        await callback.message.edit_text("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
        return

    transaction = await donate_confirm_service.set_donate_transaction_is_confirmed(
        donate_transaction_id=transaction_id
    )
    sponsor = await telegram_user_service.get_telegram_user(id=transaction.sponsor_id)
    sponsor.bill += transaction.quantity
    sender_user = await telegram_user_service.get_telegram_user(
        id=donate.telegram_user_id
    )
    donate_confirm = await donate_confirm_service.check_donate_is_confirmed(
        donate_id=transaction.donate_id
    )

    if donate_confirm:
        current_matrix_id = donate.matrix_id
        current_matrix = await matrix_service.get_matrix(id=current_matrix_id)

        sender_matrix_dict = {"owner_id": sender_user.id, "status": current_matrix.status}
        sender_matrix_entity = MatrixEntity(**sender_matrix_dict)
        sender_matrix = await matrix_service.create_matrix(matrix=sender_matrix_entity)

        await matrix_service.add_to_matrix(current_matrix, sender_matrix, sender_user)

        if check_telegram_user_status(sender_user, current_matrix.status):
            sender_user.status = current_matrix.status

        try:
            await callback.bot.send_message(
                text=f"–í–∞—à –ø–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n",
                chat_id=sender_user.user_id,
                reply_markup=get_reply_keyboard(sender_user),
            )
        except Exception:
            pass

    message = (f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ —Å—É–º–º—É ${int(transaction.quantity)} "
               f"–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{sender_user.username} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
    await callback.message.edit_text(
        message, reply_markup=get_donate_keyboard(buttons={"üîô –ù–∞–∑–∞–¥": "transactions"})
    )


@donate_router.callback_query(F.data.startswith("confirm_admin_"))
@inject
@commit_and_close_session
async def confirm_admin_transaction(
        callback: CallbackQuery,
        telegram_user_service: TelegramUserService = Provide[
            Container.telegram_user_service
        ],
        matrix_service: MatrixService = Provide[Container.matrix_service],
        donate_confirm_service: DonateConfirmService = Provide[
            Container.donate_confirm_service
        ],
) -> None:
    transaction_id = uuid.UUID(callback.data.split("_")[-1])
    transaction = await donate_confirm_service.get_donate_transaction_by_id(transaction_id)

    donate = await donate_confirm_service.get_donate_by_id(
        donate_id=transaction.donate_id
    )
    if donate.is_confirmed:
        await callback.message.edit_text("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
        return

    transaction = await donate_confirm_service.set_donate_transaction_is_confirmed(
        donate_transaction_id=transaction_id
    )
    sponsor = await telegram_user_service.get_telegram_user(id=transaction.sponsor_id)
    sponsor.bill += transaction.quantity
    try:
        if not sponsor.is_admin:
            await callback.bot.send_message(
                text=f"<strong>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è <em>{transaction_id}</em> –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º</strong>",
                chat_id=sponsor.user_id,
                parse_mode="HTML",
                reply_markup=get_reply_keyboard(sponsor),
            )
    except Exception:
        pass

    sender_user = await telegram_user_service.get_telegram_user(
        id=donate.telegram_user_id
    )
    donate_confirm = await donate_confirm_service.check_donate_is_confirmed(
        donate_id=transaction.donate_id
    )

    if donate_confirm:
        current_matrix_id = donate.matrix_id
        current_matrix = await matrix_service.get_matrix(id=current_matrix_id)

        sender_matrix_dict = {"owner_id": sender_user.id, "status": current_matrix.status}
        sender_matrix_entity = MatrixEntity(**sender_matrix_dict)
        sender_matrix = await matrix_service.create_matrix(matrix=sender_matrix_entity)

        await matrix_service.add_to_matrix(current_matrix, sender_matrix, sender_user)

        if (
                sender_user.status.value == DonateStatus.NOT_ACTIVE.value
                or
                current_matrix.status.get_status_donate_value() >
                sender_user.status.get_status_donate_value()
        ):
            sender_user.status = current_matrix.status

        try:
            await callback.bot.send_message(
                text=f"–í–∞—à –ø–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n",
                chat_id=sender_user.user_id,
                reply_markup=get_reply_keyboard(sender_user),
            )
        except Exception:
            pass

    message = (f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ —Å—É–º–º—É ${int(transaction.quantity)} "
               f"–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{sender_user.username} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
    await callback.message.edit_text(
        message, reply_markup=get_donate_keyboard(buttons={"üîô –ù–∞–∑–∞–¥": "transactions"})
    )
